# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import itcast_pb2 as itcast__pb2


class DemoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Calculate = channel.unary_unary(
                '/Demo/Calculate',
                request_serializer=itcast__pb2.Work.SerializeToString,
                response_deserializer=itcast__pb2.Result.FromString,
                )
        self.GetSubjects = channel.unary_stream(
                '/Demo/GetSubjects',
                request_serializer=itcast__pb2.City.SerializeToString,
                response_deserializer=itcast__pb2.Subject.FromString,
                )
        self.Accumulate = channel.stream_unary(
                '/Demo/Accumulate',
                request_serializer=itcast__pb2.Delta.SerializeToString,
                response_deserializer=itcast__pb2.Sub.FromString,
                )
        self.GuessNumber = channel.stream_stream(
                '/Demo/GuessNumber',
                request_serializer=itcast__pb2.Number.SerializeToString,
                response_deserializer=itcast__pb2.Answer.FromString,
                )


class DemoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Calculate(self, request, context):
        """unary rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubjects(self, request, context):
        """server streaming rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Accumulate(self, request_iterator, context):
        """client streaming rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GuessNumber(self, request_iterator, context):
        """bidirectional streaming rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DemoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Calculate': grpc.unary_unary_rpc_method_handler(
                    servicer.Calculate,
                    request_deserializer=itcast__pb2.Work.FromString,
                    response_serializer=itcast__pb2.Result.SerializeToString,
            ),
            'GetSubjects': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSubjects,
                    request_deserializer=itcast__pb2.City.FromString,
                    response_serializer=itcast__pb2.Subject.SerializeToString,
            ),
            'Accumulate': grpc.stream_unary_rpc_method_handler(
                    servicer.Accumulate,
                    request_deserializer=itcast__pb2.Delta.FromString,
                    response_serializer=itcast__pb2.Sub.SerializeToString,
            ),
            'GuessNumber': grpc.stream_stream_rpc_method_handler(
                    servicer.GuessNumber,
                    request_deserializer=itcast__pb2.Number.FromString,
                    response_serializer=itcast__pb2.Answer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Demo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Demo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Calculate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Demo/Calculate',
            itcast__pb2.Work.SerializeToString,
            itcast__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Demo/GetSubjects',
            itcast__pb2.City.SerializeToString,
            itcast__pb2.Subject.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Accumulate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Demo/Accumulate',
            itcast__pb2.Delta.SerializeToString,
            itcast__pb2.Sub.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GuessNumber(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Demo/GuessNumber',
            itcast__pb2.Number.SerializeToString,
            itcast__pb2.Answer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
